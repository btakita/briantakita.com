import { a as SvelteComponentDev, b as init, c as safe_not_equal, s as element, v as text, w as space, f as claim_element, g as children, x as claim_text, h as detach, P as set_style, j as add_location, k as insert, z as append, K as set_data, O as destroy_each, G as noop } from './chunk.1987d881.js';
import { c as a1__month__abbrev } from './chunk.cd7ed10c.js';

/* src/routes/blog/archive.html generated by Svelte v3.4.1 */

const file = "src/routes/blog/archive.html";

function get_each_context_2(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.post = list[i];
	child_ctx.k = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.month = list[i];
	child_ctx.j = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.year = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (70:7) {#each __year__month__a1__post[year][month] as post, k}
function create_each_block_2(ctx) {
	var a, t_value = ctx.post.metadata.title, t, a_href_value, a_class_value;

	return {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, style: true, class: true }, false);
			var a_nodes = children(a);

			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a.href = a_href_value = ctx.post.url;
			set_style(a, "line-height", "" + height(ctx.__year__month__a1__post[ctx.year][ctx.month]) + "em");
			a.className = a_class_value = "" + (last(ctx.__year__month__a1__post[ctx.year][ctx.month], ctx.k) ? 'last' : '') + " svelte-1lwp9f7";
			add_location(a, file, 70, 8, 2176);
		},

		m: function mount(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},

		p: function update(changed, ctx) {
			if ((changed.__year__month__a1__post || changed.a1__year) && t_value !== (t_value = ctx.post.metadata.title)) {
				set_data(t, t_value);
			}

			if ((changed.__year__month__a1__post || changed.a1__year) && a_href_value !== (a_href_value = ctx.post.url)) {
				a.href = a_href_value;
			}

			if (changed.height || changed.__year__month__a1__post || changed.a1__year || changed.Object) {
				set_style(a, "line-height", "" + height(ctx.__year__month__a1__post[ctx.year][ctx.month]) + "em");
			}

			if ((changed.__year__month__a1__post || changed.a1__year) && a_class_value !== (a_class_value = "" + (last(ctx.__year__month__a1__post[ctx.year][ctx.month], ctx.k) ? 'last' : '') + " svelte-1lwp9f7")) {
				a.className = a_class_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(a);
			}
		}
	};
}

// (61:5) {#each Object.keys(__year__month__a1__post[year]) as month, j}
function create_each_block_1(ctx) {
	var li, span, t0_value = a1__month__abbrev[ctx.month], t0, span_class_value, t1;

	var each_value_2 = ctx.__year__month__a1__post[ctx.year][ctx.month];

	var each_blocks = [];

	for (var i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c: function create() {
			li = element("li");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true, style: true }, false);
			var li_nodes = children(li);

			span = claim_element(li_nodes, "SPAN", { style: true, class: true }, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach);
			t1 = claim_text(li_nodes, "\n\t\t\t\t\t\t\t");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li_nodes);
			}

			li_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			set_style(span, "line-height", height(ctx.__year__month__a1__post[ctx.year][ctx.month]));
			span.className = span_class_value = "month-label " + (last(ctx.__year__month__a1__post[ctx.year], ctx.j) ? 'last' : '') + " svelte-1lwp9f7";
			add_location(span, file, 65, 7, 1897);
			li.className = "month svelte-1lwp9f7";
			set_style(li, "height", height(ctx.__year__month__a1__post[ctx.year][ctx.month]));
			add_location(li, file, 61, 6, 1786);
		},

		m: function mount(target, anchor) {
			insert(target, li, anchor);
			append(li, span);
			append(span, t0);
			append(li, t1);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li, null);
			}
		},

		p: function update(changed, ctx) {
			if ((changed.__year__month__a1__post || changed.a1__year) && t0_value !== (t0_value = a1__month__abbrev[ctx.month])) {
				set_data(t0, t0_value);
			}

			if (changed.height || changed.__year__month__a1__post || changed.a1__year || changed.Object) {
				set_style(span, "line-height", height(ctx.__year__month__a1__post[ctx.year][ctx.month]));
			}

			if ((changed.__year__month__a1__post || changed.a1__year) && span_class_value !== (span_class_value = "month-label " + (last(ctx.__year__month__a1__post[ctx.year], ctx.j) ? 'last' : '') + " svelte-1lwp9f7")) {
				span.className = span_class_value;
			}

			if (changed.__year__month__a1__post || changed.a1__year || changed.Object || changed.height || changed.last) {
				each_value_2 = ctx.__year__month__a1__post[ctx.year][ctx.month];

				for (var i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(li, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value_2.length;
			}

			if (changed.height || changed.__year__month__a1__post || changed.a1__year || changed.Object) {
				set_style(li, "height", height(ctx.__year__month__a1__post[ctx.year][ctx.month]));
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(li);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (54:2) {#each a1__year as year, i}
function create_each_block(ctx) {
	var li, span, t0_value = ctx.year, t0, span_class_value, t1, ul, t2;

	var each_value_1 = ctx.Object.keys(ctx.__year__month__a1__post[ctx.year]);

	var each_blocks = [];

	for (var i_1 = 0; i_1 < each_value_1.length; i_1 += 1) {
		each_blocks[i_1] = create_each_block_1(get_each_context_1(ctx, each_value_1, i_1));
	}

	return {
		c: function create() {
			li = element("li");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			ul = element("ul");

			for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
				each_blocks[i_1].c();
			}

			t2 = space();
			this.h();
		},

		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true }, false);
			var li_nodes = children(li);

			span = claim_element(li_nodes, "SPAN", { style: true, class: true }, false);
			var span_nodes = children(span);

			t0 = claim_text(span_nodes, t0_value);
			span_nodes.forEach(detach);
			t1 = claim_text(li_nodes, "\n\t\t\t\t");

			ul = claim_element(li_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
				each_blocks[i_1].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			t2 = claim_text(li_nodes, "\n\t\t\t");
			li_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			set_style(span, "line-height", "" + height(ctx.__year__a1__post[ctx.year]) + "em");
			span.className = span_class_value = "year-label " + (last(ctx.a1__year, ctx.i) ? 'last' : '') + " svelte-1lwp9f7";
			add_location(span, file, 55, 4, 1558);
			ul.className = "svelte-1lwp9f7";
			add_location(ul, file, 59, 4, 1707);
			li.className = "year svelte-1lwp9f7";
			add_location(li, file, 54, 3, 1536);
		},

		m: function mount(target, anchor) {
			insert(target, li, anchor);
			append(li, span);
			append(span, t0);
			append(li, t1);
			append(li, ul);

			for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
				each_blocks[i_1].m(ul, null);
			}

			append(li, t2);
		},

		p: function update(changed, ctx) {
			if ((changed.a1__year) && t0_value !== (t0_value = ctx.year)) {
				set_data(t0, t0_value);
			}

			if (changed.height || changed.__year__a1__post || changed.a1__year) {
				set_style(span, "line-height", "" + height(ctx.__year__a1__post[ctx.year]) + "em");
			}

			if ((changed.a1__year) && span_class_value !== (span_class_value = "year-label " + (last(ctx.a1__year, ctx.i) ? 'last' : '') + " svelte-1lwp9f7")) {
				span.className = span_class_value;
			}

			if (changed.height || changed.__year__month__a1__post || changed.a1__year || changed.Object || changed.last || changed.a1__month__abbrev) {
				each_value_1 = ctx.Object.keys(ctx.__year__month__a1__post[ctx.year]);

				for (var i_1 = 0; i_1 < each_value_1.length; i_1 += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i_1);

					if (each_blocks[i_1]) {
						each_blocks[i_1].p(changed, child_ctx);
					} else {
						each_blocks[i_1] = create_each_block_1(child_ctx);
						each_blocks[i_1].c();
						each_blocks[i_1].m(ul, null);
					}
				}

				for (; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].d(1);
				}
				each_blocks.length = each_value_1.length;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(li);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment(ctx) {
	var section, h2, t0, t1, ul;

	var each_value = ctx.a1__year;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c: function create() {
			section = element("section");
			h2 = element("h2");
			t0 = text("Archive");
			t1 = space();
			ul = element("ul");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			h2 = claim_element(section_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Archive");
			h2_nodes.forEach(detach);
			t1 = claim_text(section_nodes, "\n\t");

			ul = claim_element(section_nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			h2.className = "svelte-1lwp9f7";
			add_location(h2, file, 51, 1, 1480);
			ul.className = "svelte-1lwp9f7";
			add_location(ul, file, 52, 1, 1498);
			section.className = "archive svelte-1lwp9f7";
			add_location(section, file, 50, 0, 1453);
		},

		m: function mount(target, anchor) {
			insert(target, section, anchor);
			append(section, h2);
			append(h2, t0);
			append(section, t1);
			append(section, ul);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed.Object || changed.__year__month__a1__post || changed.a1__year || changed.height || changed.last || changed.a1__month__abbrev || changed.__year__a1__post) {
				each_value = ctx.a1__year;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(section);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

async function preload({ params, query }) {
	const response = await this.fetch('posts.json');
	const a1__post = await response.json();
	return { a1__post }
}

const lineHeight = 2.2;

function last(list, i) {
	return list.length - 1 == i
}

function height(a1__post) {
	return lineHeight * a1__post.length
}

function instance($$self, $$props, $$invalidate) {
	
	let { a1__post } = $$props;
	let __year__a1__post;
	let __year__month__a1__post;
	let a1__year;

	$$self.$set = $$props => {
		if ('a1__post' in $$props) $$invalidate('a1__post', a1__post = $$props.a1__post);
	};

	$$self.$$.update = ($$dirty = { a1__post: 1, __year__a1__post: 1 }) => {
		if ($$dirty.a1__post) { {
				const __year__a1__post__ = {};
				for (let i = a1__post.length - 1; i; i--) {
					const post = a1__post[i];
					const year = new Date(post.date).getFullYear();
					const a1__post__ = __year__a1__post__[year] || (__year__a1__post__[year] = []);
					a1__post__.push(post);
				}
				$$invalidate('__year__a1__post', __year__a1__post = __year__a1__post__);
			} }
		if ($$dirty.__year__a1__post) { {
				const __year__month__a1__post__ = {};
				for (let year in __year__a1__post) {
					const a1__post__BY__month = __year__month__a1__post__[year] || {};
					__year__month__a1__post__[year] = a1__post__BY__month;
					const posts__year = __year__a1__post[year];
					for (let i = 0; i < posts__year.length; i++) {
						const post = posts__year[i];
						const month = new Date(post.date).getMonth();
						const a1__post__ = a1__post__BY__month[month] || (a1__post__BY__month[month] = []);
						a1__post__.push(post);
					}
				}
				$$invalidate('__year__month__a1__post', __year__month__a1__post = __year__month__a1__post__);
			} }
		if ($$dirty.__year__a1__post) { $$invalidate('a1__year', a1__year = Object.keys(__year__a1__post)); }
	};

	return {
		a1__post,
		__year__a1__post,
		__year__month__a1__post,
		a1__year,
		Object
	};
}

class Archive extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["a1__post"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.a1__post === undefined && !('a1__post' in props)) {
			console.warn("<Archive> was created without expected prop 'a1__post'");
		}
	}

	get a1__post() {
		throw new Error("<Archive>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set a1__post(value) {
		throw new Error("<Archive>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Archive;
export { preload };
//# sourceMappingURL=archive.7f69375e.js.map
