import { a as SvelteComponentDev, b as init, c as safe_not_equal, s as element, v as text, w as space, f as claim_element, g as children, x as claim_text, h as detach, j as add_location, k as insert, z as append, q as mount_component } from './chunk.1987d881.js';
import { a as A } from './chunk.326a4a87.js';

/* src/routes/interests/index.html generated by Svelte v3.4.1 */

const file = "src/routes/interests/index.html";

// (11:1) <A href="https://github.com/btakita/philosophy">
function create_default_slot_6(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Meta-Philosophy");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Meta-Philosophy");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (16:1) <A href="/posts/magic-connections-with-the-philosophy-of-language">
function create_default_slot_5(ctx) {
	var t;

	return {
		c: function create() {
			t = text("language");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "language");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (21:4) <A href="https://www.thunderbolts.info/wp/">
function create_default_slot_4(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Electric Universe");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Electric Universe");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (41:1) <A href="https://github.com/Holochain/holochain-proto/blob/whitepaper/holochain.pdf">
function create_default_slot_3(ctx) {
	var t;

	return {
		c: function create() {
			t = text("whitepaper");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "whitepaper");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (43:1) <A href="https://github.com/btakita/holochain-notes/blob/master/whitepaper.md">
function create_default_slot_2(ctx) {
	var t;

	return {
		c: function create() {
			t = text("notes");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "notes");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (47:1) <A href="https://v3.svelte.technology">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Svelte");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Svelte");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (48:4) <A href="https://sapper.svelte.technology">
function create_default_slot(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Sapper");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Sapper");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

function create_fragment(ctx) {
	var h1, t0, t1, h20, t2, t3, p0, t4, t5, t6, p1, t7, t8, t9, h21, t10, p2, t11, t12, h22, t13, t14, p3, t15, t16, h23, t17, t18, p4, t19, t20, t21, t22, h24, t23, t24, p5, t25, current;

	var a0 = new A({
		props: {
		href: "https://github.com/btakita/philosophy",
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var a1 = new A({
		props: {
		href: "/posts/magic-connections-with-the-philosophy-of-language",
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var a2 = new A({
		props: {
		href: "https://www.thunderbolts.info/wp/",
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var a3 = new A({
		props: {
		href: "https://github.com/Holochain/holochain-proto/blob/whitepaper/holochain.pdf",
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var a4 = new A({
		props: {
		href: "https://github.com/btakita/holochain-notes/blob/master/whitepaper.md",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var a5 = new A({
		props: {
		href: "https://v3.svelte.technology",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var a6 = new A({
		props: {
		href: "https://sapper.svelte.technology",
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			h1 = element("h1");
			t0 = text("Current Interests");
			t1 = space();
			h20 = element("h2");
			t2 = text("Meta-Philosophy");
			t3 = space();
			p0 = element("p");
			t4 = text("From the question \"how do we model existence?\" sprang a\n\t");
			a0.$$.fragment.c();
			t5 = text(".");
			t6 = space();
			p1 = element("p");
			t7 = text("This Meta-philosophy can be applied via\n\t");
			a1.$$.fragment.c();
			t8 = text("\n\tto model any reified entity. Language patterns can be utilized in software & speech to\n\tcreate models of Existence.");
			t9 = space();
			h21 = element("h2");
			a2.$$.fragment.c();
			t10 = space();
			p2 = element("p");
			t11 = text("Viewing the Universe through the lens of Electricity & Magnetism.\n\tThe same well known electrical equations & circuit theory can be applied from the\n\tmicro to the cosmic, with surprising twists. The incomprehensible becomes understood\n\twith an effective model.");
			t12 = space();
			h22 = element("h2");
			t13 = text("Health");
			t14 = space();
			p3 = element("p");
			t15 = text("Enjoying a low-carb diet. Utilizing knowledge of electrical interactions within the body to\n\tstrategically utilize food & supplements for optimal health.");
			t16 = space();
			h23 = element("h2");
			t17 = text("Holochain");
			t18 = space();
			p4 = element("p");
			t19 = text("Agent-centric crypto platform, inspired by nature. The\n\t");
			a3.$$.fragment.c();
			t20 = text("\n\tis worth a read. Here are some\n\t");
			a4.$$.fragment.c();
			t21 = text(".");
			t22 = space();
			h24 = element("h2");
			a5.$$.fragment.c();
			t23 = text("\n\t\t& ");
			a6.$$.fragment.c();
			t24 = space();
			p5 = element("p");
			t25 = text("Truly reactive & compiled isomorphic web component libraries.");
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t0 = claim_text(h1_nodes, "Current Interests");
			h1_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n");

			h20 = claim_element(nodes, "H2", {}, false);
			var h20_nodes = children(h20);

			t2 = claim_text(h20_nodes, "Meta-Philosophy");
			h20_nodes.forEach(detach);
			t3 = claim_text(nodes, "\n\n");

			p0 = claim_element(nodes, "P", {}, false);
			var p0_nodes = children(p0);

			t4 = claim_text(p0_nodes, "From the question \"how do we model existence?\" sprang a\n\t");
			a0.$$.fragment.l(p0_nodes);
			t5 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach);
			t6 = claim_text(nodes, "\n\n");

			p1 = claim_element(nodes, "P", {}, false);
			var p1_nodes = children(p1);

			t7 = claim_text(p1_nodes, "This Meta-philosophy can be applied via\n\t");
			a1.$$.fragment.l(p1_nodes);
			t8 = claim_text(p1_nodes, "\n\tto model any reified entity. Language patterns can be utilized in software & speech to\n\tcreate models of Existence.");
			p1_nodes.forEach(detach);
			t9 = claim_text(nodes, "\n\n");

			h21 = claim_element(nodes, "H2", {}, false);
			var h21_nodes = children(h21);

			a2.$$.fragment.l(h21_nodes);
			h21_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n\n");

			p2 = claim_element(nodes, "P", {}, false);
			var p2_nodes = children(p2);

			t11 = claim_text(p2_nodes, "Viewing the Universe through the lens of Electricity & Magnetism.\n\tThe same well known electrical equations & circuit theory can be applied from the\n\tmicro to the cosmic, with surprising twists. The incomprehensible becomes understood\n\twith an effective model.");
			p2_nodes.forEach(detach);
			t12 = claim_text(nodes, "\n\n");

			h22 = claim_element(nodes, "H2", {}, false);
			var h22_nodes = children(h22);

			t13 = claim_text(h22_nodes, "Health");
			h22_nodes.forEach(detach);
			t14 = claim_text(nodes, "\n\n");

			p3 = claim_element(nodes, "P", {}, false);
			var p3_nodes = children(p3);

			t15 = claim_text(p3_nodes, "Enjoying a low-carb diet. Utilizing knowledge of electrical interactions within the body to\n\tstrategically utilize food & supplements for optimal health.");
			p3_nodes.forEach(detach);
			t16 = claim_text(nodes, "\n\n");

			h23 = claim_element(nodes, "H2", {}, false);
			var h23_nodes = children(h23);

			t17 = claim_text(h23_nodes, "Holochain");
			h23_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n\n");

			p4 = claim_element(nodes, "P", {}, false);
			var p4_nodes = children(p4);

			t19 = claim_text(p4_nodes, "Agent-centric crypto platform, inspired by nature. The\n\t");
			a3.$$.fragment.l(p4_nodes);
			t20 = claim_text(p4_nodes, "\n\tis worth a read. Here are some\n\t");
			a4.$$.fragment.l(p4_nodes);
			t21 = claim_text(p4_nodes, ".");
			p4_nodes.forEach(detach);
			t22 = claim_text(nodes, "\n\n");

			h24 = claim_element(nodes, "H2", {}, false);
			var h24_nodes = children(h24);

			a5.$$.fragment.l(h24_nodes);
			t23 = claim_text(h24_nodes, "\n\t\t& ");
			a6.$$.fragment.l(h24_nodes);
			h24_nodes.forEach(detach);
			t24 = claim_text(nodes, "\n\n");

			p5 = claim_element(nodes, "P", {}, false);
			var p5_nodes = children(p5);

			t25 = claim_text(p5_nodes, "Truly reactive & compiled isomorphic web component libraries.");
			p5_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(h1, file, 4, 0, 72);
			add_location(h20, file, 6, 0, 100);
			add_location(p0, file, 8, 0, 126);
			add_location(p1, file, 13, 0, 263);
			add_location(h21, file, 20, 0, 512);
			add_location(p2, file, 22, 0, 588);
			add_location(h22, file, 29, 0, 860);
			add_location(p3, file, 31, 0, 877);
			add_location(h23, file, 36, 0, 1042);
			add_location(p4, file, 38, 0, 1062);
			add_location(h24, file, 45, 0, 1352);
			add_location(p5, file, 51, 0, 1475);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, h20, anchor);
			append(h20, t2);
			insert(target, t3, anchor);
			insert(target, p0, anchor);
			append(p0, t4);
			mount_component(a0, p0, null);
			append(p0, t5);
			insert(target, t6, anchor);
			insert(target, p1, anchor);
			append(p1, t7);
			mount_component(a1, p1, null);
			append(p1, t8);
			insert(target, t9, anchor);
			insert(target, h21, anchor);
			mount_component(a2, h21, null);
			insert(target, t10, anchor);
			insert(target, p2, anchor);
			append(p2, t11);
			insert(target, t12, anchor);
			insert(target, h22, anchor);
			append(h22, t13);
			insert(target, t14, anchor);
			insert(target, p3, anchor);
			append(p3, t15);
			insert(target, t16, anchor);
			insert(target, h23, anchor);
			append(h23, t17);
			insert(target, t18, anchor);
			insert(target, p4, anchor);
			append(p4, t19);
			mount_component(a3, p4, null);
			append(p4, t20);
			mount_component(a4, p4, null);
			append(p4, t21);
			insert(target, t22, anchor);
			insert(target, h24, anchor);
			mount_component(a5, h24, null);
			append(h24, t23);
			mount_component(a6, h24, null);
			insert(target, t24, anchor);
			insert(target, p5, anchor);
			append(p5, t25);
			current = true;
		},

		p: function update(changed, ctx) {
			var a0_changes = {};
			if (changed.$$scope) a0_changes.$$scope = { changed, ctx };
			a0.$set(a0_changes);

			var a1_changes = {};
			if (changed.$$scope) a1_changes.$$scope = { changed, ctx };
			a1.$set(a1_changes);

			var a2_changes = {};
			if (changed.$$scope) a2_changes.$$scope = { changed, ctx };
			a2.$set(a2_changes);

			var a3_changes = {};
			if (changed.$$scope) a3_changes.$$scope = { changed, ctx };
			a3.$set(a3_changes);

			var a4_changes = {};
			if (changed.$$scope) a4_changes.$$scope = { changed, ctx };
			a4.$set(a4_changes);

			var a5_changes = {};
			if (changed.$$scope) a5_changes.$$scope = { changed, ctx };
			a5.$set(a5_changes);

			var a6_changes = {};
			if (changed.$$scope) a6_changes.$$scope = { changed, ctx };
			a6.$set(a6_changes);
		},

		i: function intro(local) {
			if (current) return;
			a0.$$.fragment.i(local);

			a1.$$.fragment.i(local);

			a2.$$.fragment.i(local);

			a3.$$.fragment.i(local);

			a4.$$.fragment.i(local);

			a5.$$.fragment.i(local);

			a6.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			a0.$$.fragment.o(local);
			a1.$$.fragment.o(local);
			a2.$$.fragment.o(local);
			a3.$$.fragment.o(local);
			a4.$$.fragment.o(local);
			a5.$$.fragment.o(local);
			a6.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(h20);
				detach(t3);
				detach(p0);
			}

			a0.$destroy();

			if (detaching) {
				detach(t6);
				detach(p1);
			}

			a1.$destroy();

			if (detaching) {
				detach(t9);
				detach(h21);
			}

			a2.$destroy();

			if (detaching) {
				detach(t10);
				detach(p2);
				detach(t12);
				detach(h22);
				detach(t14);
				detach(p3);
				detach(t16);
				detach(h23);
				detach(t18);
				detach(p4);
			}

			a3.$destroy();

			a4.$destroy();

			if (detaching) {
				detach(t22);
				detach(h24);
			}

			a5.$destroy();

			a6.$destroy();

			if (detaching) {
				detach(t24);
				detach(p5);
			}
		}
	};
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default Index;
//# sourceMappingURL=index.38f4d51f.js.map
