import { a as SvelteComponentDev, b as init, c as safe_not_equal, w as space, x as claim_text, q as mount_component, k as insert, G as noop, h as detach } from './chunk.1987d881.js';
import { d as __prepend__footer } from './chunk.7f5cd15f.js';
import './chunk.326a4a87.js';
import './chunk.cd7ed10c.js';
import './chunk.76d13346.js';
import Archive from './20190415.06951d6c.js';
import Previous from './20190403.de5bbbaf.js';

/* src/routes/index.html generated by Svelte v3.4.1 */

function create_fragment(ctx) {
	var t, current;

	var archive = new Archive({ $$inline: true });

	var previous = new Previous({ $$inline: true });

	return {
		c: function create() {
			archive.$$.fragment.c();
			t = space();
			previous.$$.fragment.c();
		},

		l: function claim(nodes) {
			archive.$$.fragment.l(nodes);
			t = claim_text(nodes, "\n");
			previous.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(archive, target, anchor);
			insert(target, t, anchor);
			mount_component(previous, target, anchor);
			current = true;
		},

		p: noop,

		i: function intro(local) {
			if (current) return;
			archive.$$.fragment.i(local);

			previous.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			archive.$$.fragment.o(local);
			previous.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			archive.$destroy(detaching);

			if (detaching) {
				detach(t);
			}

			previous.$destroy(detaching);
		}
	};
}

async function preload({ query, params }) {
	const response = await this.fetch('/archive.json');
	const json = await response.json();
	const { a1__archive_id } = json;
	return {
		a1__archive_id
	}
}

function instance($$self, $$props, $$invalidate) {
	
	let { a1__archive_id } = $$props;
	__prepend__footer.set(`<div class="nav"><a href="/archive"> Â« Archive</a></div>`);

	$$self.$set = $$props => {
		if ('a1__archive_id' in $$props) $$invalidate('a1__archive_id', a1__archive_id = $$props.a1__archive_id);
	};

	return { a1__archive_id };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["a1__archive_id"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.a1__archive_id === undefined && !('a1__archive_id' in props)) {
			console.warn("<Index> was created without expected prop 'a1__archive_id'");
		}
	}

	get a1__archive_id() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set a1__archive_id(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=index.e7f6c49a.js.map
