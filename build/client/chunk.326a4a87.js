import { a as SvelteComponentDev, b as init, c as safe_not_equal, d as create_slot, o as assign, s as element, f as claim_element, g as children, h as detach, N as set_attributes, j as add_location, k as insert, m as get_slot_changes, n as get_slot_context, r as get_spread_update, p as exclude_internal_props } from './chunk.1987d881.js';

/* home/brian/work/briantakita.com/packages/ctx-core/packages/a__target/A__Target.html generated by Svelte v3.4.1 */

const file = "home/brian/work/briantakita.com/packages/ctx-core/packages/a__target/A__Target.html";

function create_fragment(ctx) {
	var a, current;

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	var a_levels = [
		{ href: ctx.href },
		{ class: "A__Target " + ctx.class__ },
		{ target: ctx.target__ },
		ctx.$$props
	];

	var a_data = {};
	for (var i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c: function create() {
			a = element("a");

			if (default_slot) default_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true, target: true }, false);
			var a_nodes = children(a);

			if (default_slot) default_slot.l(a_nodes);
			a_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			set_attributes(a, a_data);
			add_location(a, file, 11, 0, 241);
		},

		m: function mount(target_1, anchor) {
			insert(target_1, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}

			set_attributes(a, get_spread_update(a_levels, [
				(changed.href) && { href: ctx.href },
				(changed.class__) && { class: "A__Target " + ctx.class__ },
				(changed.target__) && { target: ctx.target__ },
				(changed.$$props) && ctx.$$props
			]));
		},

		i: function intro(local) {
			if (current) return;
			if (default_slot && default_slot.i) default_slot.i(local);
			current = true;
		},

		o: function outro(local) {
			if (default_slot && default_slot.o) default_slot.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(a);
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { href, target = null, alt = '', title = '' } = $$props;
	let class__;
	let target__;

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$new_props => {
		$$invalidate('$$props', $$props = assign(assign({}, $$props), $$new_props));
		if ('href' in $$props) $$invalidate('href', href = $$props.href);
		if ('target' in $$props) $$invalidate('target', target = $$props.target);
		if ('alt' in $$props) $$invalidate('alt', alt = $$props.alt);
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('$$scope' in $$new_props) $$invalidate('$$scope', $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = ($$dirty = { $$props: 1, target: 1, href: 1 }) => {
		$$invalidate('class__', class__ = $$props.class || '');
		if ($$dirty.target || $$dirty.href) { $$invalidate('target__', target__ = target || href.split(':').length > 1 ? '_blank' : '_self'); }
	};

	return {
		href,
		target,
		alt,
		title,
		class__,
		target__,
		$$props,
		$$props: $$props = exclude_internal_props($$props),
		$$slots,
		$$scope
	};
}

class A__Target extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["href", "target", "alt", "title"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.href === undefined && !('href' in props)) {
			console.warn("<A__Target> was created without expected prop 'href'");
		}
	}

	get href() {
		throw new Error("<A__Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<A__Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<A__Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<A__Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<A__Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<A__Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<A__Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<A__Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { A__Target as a };
//# sourceMappingURL=chunk.326a4a87.js.map
