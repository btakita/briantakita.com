import { a as SvelteComponentDev, b as init, c as safe_not_equal, s as element, w as space, v as text, f as claim_element, g as children, h as detach, x as claim_text, j as add_location, k as insert, z as append, q as mount_component } from './chunk.1987d881.js';
import { a as A } from './chunk.326a4a87.js';
import './chunk.cd7ed10c.js';
import { a as Date__Local } from './chunk.76d13346.js';

/* src/routes/archive/20190415.html generated by Svelte v3.4.1 */

const file = "src/routes/archive/20190415.html";

// (13:2) <A href="/posts/multi-underscore-tag-naming-convention-analysis">
function create_default_slot_1(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Multi Underscore Tag Naming Convention Analysis");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Multi Underscore Tag Naming Convention Analysis");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (28:2) <A href="/posts/naming-conventions">
function create_default_slot(ctx) {
	var t;

	return {
		c: function create() {
			t = text("Multi Underscore Tag Naming Convention\n\t\t");
		},

		l: function claim(nodes) {
			t = claim_text(nodes, "Multi Underscore Tag Naming Convention\n\t\t");
		},

		m: function mount(target, anchor) {
			insert(target, t, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

function create_fragment(ctx) {
	var header, p0, span, t0, h2, t1, t2, p1, t3, t4, t5, p2, t6, t7, p3, t8, t9, current;

	var date__local = new Date__Local({
		props: { date: "2019-04-15" },
		$$inline: true
	});

	var a0 = new A({
		props: {
		href: "/posts/multi-underscore-tag-naming-convention-analysis",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	var a1 = new A({
		props: {
		href: "/posts/naming-conventions",
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	},
		$$inline: true
	});

	return {
		c: function create() {
			header = element("header");
			p0 = element("p");
			span = element("span");
			date__local.$$.fragment.c();
			t0 = space();
			h2 = element("h2");
			t1 = text("Multi Underscore Tag Naming Convention");
			t2 = space();
			p1 = element("p");
			t3 = text("I wrote\n\t\t");
			a0.$$.fragment.c();
			t4 = text("\n\t\twhich describes the Ontology & structure of the naming convention.");
			t5 = space();
			p2 = element("p");
			t6 = text("TODO: I will latter post how & why the \"Multi Underscore Tag Naming Convention\"\n\t\tcan assist in creating simpler software that scales with complexity.\n\tAlso, I will explain how this naming convention makes it easy to find abstractions\n\t\tin a codebase with confidence, across any number of software & data layers.");
			t7 = space();
			p3 = element("p");
			t8 = text("I also have a previous post with a quick introduction to the\n\t\t");
			a1.$$.fragment.c();
			t9 = text(".");
			this.h();
		},

		l: function claim(nodes) {
			header = claim_element(nodes, "HEADER", {}, false);
			var header_nodes = children(header);

			p0 = claim_element(header_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			span = claim_element(p0_nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			date__local.$$.fragment.l(span_nodes);
			span_nodes.forEach(detach);
			p0_nodes.forEach(detach);
			t0 = claim_text(header_nodes, "\n\t");

			h2 = claim_element(header_nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			t1 = claim_text(h2_nodes, "Multi Underscore Tag Naming Convention");
			h2_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t2 = claim_text(nodes, "\n\n");

			p1 = claim_element(nodes, "P", {}, false);
			var p1_nodes = children(p1);

			t3 = claim_text(p1_nodes, "I wrote\n\t\t");
			a0.$$.fragment.l(p1_nodes);
			t4 = claim_text(p1_nodes, "\n\t\twhich describes the Ontology & structure of the naming convention.");
			p1_nodes.forEach(detach);
			t5 = claim_text(nodes, "\n\n");

			p2 = claim_element(nodes, "P", {}, false);
			var p2_nodes = children(p2);

			t6 = claim_text(p2_nodes, "TODO: I will latter post how & why the \"Multi Underscore Tag Naming Convention\"\n\t\tcan assist in creating simpler software that scales with complexity.\n\tAlso, I will explain how this naming convention makes it easy to find abstractions\n\t\tin a codebase with confidence, across any number of software & data layers.");
			p2_nodes.forEach(detach);
			t7 = claim_text(nodes, "\n\n");

			p3 = claim_element(nodes, "P", {}, false);
			var p3_nodes = children(p3);

			t8 = claim_text(p3_nodes, "I also have a previous post with a quick introduction to the\n\t\t");
			a1.$$.fragment.l(p3_nodes);
			t9 = claim_text(p3_nodes, ".");
			p3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(span, file, 6, 17, 157);
			p0.className = "date";
			add_location(p0, file, 6, 1, 141);
			add_location(h2, file, 7, 1, 221);
			add_location(header, file, 5, 0, 131);
			add_location(p1, file, 10, 0, 280);
			add_location(p2, file, 18, 0, 494);
			add_location(p3, file, 25, 0, 818);
		},

		m: function mount(target, anchor) {
			insert(target, header, anchor);
			append(header, p0);
			append(p0, span);
			mount_component(date__local, span, null);
			append(header, t0);
			append(header, h2);
			append(h2, t1);
			insert(target, t2, anchor);
			insert(target, p1, anchor);
			append(p1, t3);
			mount_component(a0, p1, null);
			append(p1, t4);
			insert(target, t5, anchor);
			insert(target, p2, anchor);
			append(p2, t6);
			insert(target, t7, anchor);
			insert(target, p3, anchor);
			append(p3, t8);
			mount_component(a1, p3, null);
			append(p3, t9);
			current = true;
		},

		p: function update(changed, ctx) {
			var a0_changes = {};
			if (changed.$$scope) a0_changes.$$scope = { changed, ctx };
			a0.$set(a0_changes);

			var a1_changes = {};
			if (changed.$$scope) a1_changes.$$scope = { changed, ctx };
			a1.$set(a1_changes);
		},

		i: function intro(local) {
			if (current) return;
			date__local.$$.fragment.i(local);

			a0.$$.fragment.i(local);

			a1.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			date__local.$$.fragment.o(local);
			a0.$$.fragment.o(local);
			a1.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(header);
			}

			date__local.$destroy();

			if (detaching) {
				detach(t2);
				detach(p1);
			}

			a0.$destroy();

			if (detaching) {
				detach(t5);
				detach(p2);
				detach(t7);
				detach(p3);
			}

			a1.$destroy();
		}
	};
}

class _20190415 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, []);
	}
}

export default _20190415;
//# sourceMappingURL=20190415.06951d6c.js.map
