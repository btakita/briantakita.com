import { a as SvelteComponentDev, b as init, c as safe_not_equal, s as element, v as text, f as claim_element, g as children, x as claim_text, h as detach, j as add_location, k as insert, z as append, K as set_data, w as space, J as empty, G as noop, O as destroy_each } from './chunk.1987d881.js';

// Copyright Joyent, Inc. and other Node contributors.

/* src/routes/archive/index.html generated by Svelte v3.4.1 */

const file = "src/routes/archive/index.html";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.archive_id = list[i];
	return child_ctx;
}

// (19:0) {#each a1__archive_id as archive_id}
function create_each_block(ctx) {
	var div, a, t_value = ctx.archive_id, t, a_href_value;

	return {
		c: function create() {
			div = element("div");
			a = element("a");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {}, false);
			var div_nodes = children(div);

			a = claim_element(div_nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a.href = a_href_value = "/archive/" + ctx.archive_id;
			add_location(a, file, 19, 6, 390);
			add_location(div, file, 19, 1, 385);
		},

		m: function mount(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, t);
		},

		p: function update(changed, ctx) {
			if ((changed.a1__archive_id) && t_value !== (t_value = ctx.archive_id)) {
				set_data(t, t_value);
			}

			if ((changed.a1__archive_id) && a_href_value !== (a_href_value = "/archive/" + ctx.archive_id)) {
				a.href = a_href_value;
			}
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

function create_fragment(ctx) {
	var h2, t0, t1, each_1_anchor;

	var each_value = ctx.a1__archive_id;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c: function create() {
			h2 = element("h2");
			t0 = text("Archive");
			t1 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			t0 = claim_text(h2_nodes, "Archive");
			h2_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n\n");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			add_location(h2, file, 16, 0, 329);
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t0);
			insert(target, t1, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (changed.a1__archive_id) {
				each_value = ctx.a1__archive_id;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
				detach(t1);
			}

			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

async function preload({ params, query }) {
	const response = await this.fetch('/archive.json');
	const json = await response.json();
	const { a1__archive_id } = json;
	return {
		a1__archive_id
	}
}

function instance($$self, $$props, $$invalidate) {
	let { a1__archive_id } = $$props;

	$$self.$set = $$props => {
		if ('a1__archive_id' in $$props) $$invalidate('a1__archive_id', a1__archive_id = $$props.a1__archive_id);
	};

	return { a1__archive_id };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["a1__archive_id"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.a1__archive_id === undefined && !('a1__archive_id' in props)) {
			console.warn("<Index> was created without expected prop 'a1__archive_id'");
		}
	}

	get a1__archive_id() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set a1__archive_id(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=index.580397cf.js.map
