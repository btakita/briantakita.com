import { a as SvelteComponentDev, b as init, c as safe_not_equal, s as element, w as space, v as text, f as claim_element, g as children, h as detach, x as claim_text, j as add_location, k as insert, z as append, q as mount_component, K as set_data, I as detach_between } from './chunk.1987d881.js';
import { f as __class__layout, d as __prepend__footer, c as __subheader } from './chunk.7f5cd15f.js';
import './chunk.cd7ed10c.js';
import { a as Date__Local } from './chunk.76d13346.js';

/* src/routes/posts/[post_id].html generated by Svelte v3.4.1 */

const file = "src/routes/posts/[post_id].html";

function create_fragment(ctx) {
	var section, div1, header, p, span, t0, h2, a0, t1_value = ctx.post.metadata.title, t1, a0_href_value, t2, raw_value = ctx.post.html, raw_before, raw_after, t3, div0, t4, script, t5, t6, current;

	var date__local = new Date__Local({
		props: { date: ctx.post.txt__date },
		$$inline: true
	});

	return {
		c: function create() {
			section = element("section");
			div1 = element("div");
			header = element("header");
			p = element("p");
			span = element("span");
			date__local.$$.fragment.c();
			t0 = space();
			h2 = element("h2");
			a0 = element("a");
			t1 = text(t1_value);
			t2 = space();
			raw_before = element('noscript');
			raw_after = element('noscript');
			t3 = space();
			div0 = element("div");
			t4 = space();
			script = element("script");
			t5 = text("/**\n\t\t\t *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n\t\t\t *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/\n\t\t\tvar disqus_config = function () {\n\t\t\t\tthis.page.url = window.location.href\n\t\t\t\tvar hrefSegments = window.location.pathname.split('/')\n\t\t\t\tvar identifier = 'briantakita-' + hrefSegments[hrefSegments.length - 1]\n\t\t\t\tthis.page.identifier = identifier\n\t\t\t};\n\t\t\t(function () { // DON'T EDIT BELOW THIS LINE\n\t\t\t\tvar d = document, s = d.createElement('script')\n\t\t\t\ts.src = 'https://briantakita.disqus.com/embed.js'\n\t\t\t\ts.setAttribute('data-timestamp', +new Date());\n\t\t\t\t(d.head || d.body).appendChild(s)\n\t\t\t})()");
			t6 = space();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			div1 = claim_element(section_nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			header = claim_element(div1_nodes, "HEADER", {}, false);
			var header_nodes = children(header);

			p = claim_element(header_nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			span = claim_element(p_nodes, "SPAN", {}, false);
			var span_nodes = children(span);

			date__local.$$.fragment.l(span_nodes);
			span_nodes.forEach(detach);
			p_nodes.forEach(detach);
			t0 = claim_text(header_nodes, "\n\t\t\t");

			h2 = claim_element(header_nodes, "H2", {}, false);
			var h2_nodes = children(h2);

			a0 = claim_element(h2_nodes, "A", { href: true }, false);
			var a0_nodes = children(a0);

			t1 = claim_text(a0_nodes, t1_value);
			a0_nodes.forEach(detach);
			h2_nodes.forEach(detach);
			header_nodes.forEach(detach);
			t2 = claim_text(div1_nodes, "\n\t\t");
			raw_before = element('noscript');
			raw_after = element('noscript');
			t3 = claim_text(div1_nodes, "\n\t\t");

			div0 = claim_element(div1_nodes, "DIV", { id: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t4 = claim_text(div1_nodes, "\n\t\t");

			script = claim_element(div1_nodes, "SCRIPT", { type: true }, false);
			var script_nodes = children(script);

			t5 = claim_text(script_nodes, "/**\n\t\t\t *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.\n\t\t\t *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/\n\t\t\tvar disqus_config = function () {\n\t\t\t\tthis.page.url = window.location.href\n\t\t\t\tvar hrefSegments = window.location.pathname.split('/')\n\t\t\t\tvar identifier = 'briantakita-' + hrefSegments[hrefSegments.length - 1]\n\t\t\t\tthis.page.identifier = identifier\n\t\t\t};\n\t\t\t(function () { // DON'T EDIT BELOW THIS LINE\n\t\t\t\tvar d = document, s = d.createElement('script')\n\t\t\t\ts.src = 'https://briantakita.disqus.com/embed.js'\n\t\t\t\ts.setAttribute('data-timestamp', +new Date());\n\t\t\t\t(d.head || d.body).appendChild(s)\n\t\t\t})()");
			script_nodes.forEach(detach);
			t6 = claim_text(div1_nodes, "\n\t\t");
			div1_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(span, file, 25, 19, 789);
			p.className = "date";
			add_location(p, file, 25, 3, 773);
			a0.href = a0_href_value = ctx.post.path;
			add_location(a0, file, 26, 7, 865);
			add_location(h2, file, 26, 3, 861);
			add_location(header, file, 24, 2, 761);
			div0.id = "disqus_thread";
			add_location(div0, file, 29, 2, 952);
			script.type = "text/javascript";
			add_location(script, file, 30, 2, 985);
			div1.className = "content";
			add_location(div1, file, 23, 1, 737);
			section.className = "post";
			add_location(section, file, 22, 0, 713);
		},

		m: function mount(target, anchor) {
			insert(target, section, anchor);
			append(section, div1);
			append(div1, header);
			append(header, p);
			append(p, span);
			mount_component(date__local, span, null);
			append(header, t0);
			append(header, h2);
			append(h2, a0);
			append(a0, t1);
			append(div1, t2);
			append(div1, raw_before);
			raw_before.insertAdjacentHTML("afterend", raw_value);
			append(div1, raw_after);
			append(div1, t3);
			append(div1, div0);
			append(div1, t4);
			append(div1, script);
			append(script, t5);
			append(div1, t6);
			current = true;
		},

		p: function update(changed, ctx) {
			var date__local_changes = {};
			if (changed.post) date__local_changes.date = ctx.post.txt__date;
			date__local.$set(date__local_changes);

			if ((!current || changed.post) && t1_value !== (t1_value = ctx.post.metadata.title)) {
				set_data(t1, t1_value);
			}

			if ((!current || changed.post) && a0_href_value !== (a0_href_value = ctx.post.path)) {
				a0.href = a0_href_value;
			}

			if ((!current || changed.post) && raw_value !== (raw_value = ctx.post.html)) {
				detach_between(raw_before, raw_after);
				raw_before.insertAdjacentHTML("afterend", raw_value);
			}
		},

		i: function intro(local) {
			if (current) return;
			date__local.$$.fragment.i(local);

			current = true;
		},

		o: function outro(local) {
			date__local.$$.fragment.o(local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(section);
			}

			date__local.$destroy();
		}
	};
}

async function preload({ params, query }) {
	const { post_id } = params;
	const response = await this.fetch(`posts/${post_id}.json`);
	const post = await response.json();
	if (!post) {
		this.error(404, 'Post Not Found');
	}
	return post && { post }
}

function instance($$self, $$props, $$invalidate) {
	
	let { post, title = '' } = $$props;
	__class__layout.set('post-detail');
	__prepend__footer.set(`<div class="nav"><a href="/"> Â« Full blog</a></div>`);

	$$self.$set = $$props => {
		if ('post' in $$props) $$invalidate('post', post = $$props.post);
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
	};

	$$self.$$.update = ($$dirty = { title: 1 }) => {
		if ($$dirty.title) { __subheader.set(title); }
	};

	return { post, title };
}

class Post_id extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["post", "title"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.post === undefined && !('post' in props)) {
			console.warn("<Post_id> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<Post_id>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<Post_id>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Post_id>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Post_id>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Post_id;
export { preload };
//# sourceMappingURL=[post_id].597f5f2d.js.map
