{"html":"<a href=\"/posts/backbone-signal-practical-reactive-programming-in-javascript/\">\n  <img\n    src=\"/images/neurons.jpg\"\n    alt=\"Brian Takita - backbone-signal - Practical Reactive Programming in Javascript - From Parthiv Haldipur http://www.flickr.com/photos/hmmmmm/3903176411/ - Licensed under Creative Commons\"\n  />\n</a>\n\n<p>I have recently released <a href=\"https://github.com/btakita/backbone-signal\" target=\"_blank\">backbone-signal (github.com)</a>, which is a <a href=\"https://en.wikipedia.org/wiki/Reactive_programming\" target=\"_blank\">reactive programming (Wikipedia)</a> library with a practical &amp; javascripty model api.</p>\n<hr class=\"more\"/>\n\n<pre><code class=\"language-js\">// backbone-signal extends Backbone.Model\nvar app = new Backbone.Model();\n\nvar userSignal = app.signal(&quot;user&quot;);\nuserSignal.getTruthy(app, function(app, user) {\n  console.info(&quot;Hello &quot; + user.name);\n});\n\nconsole.info(&quot;Let&#39;s see some friends&quot;);\nuserSignal.set({\n  name: &quot;Jane&quot;\n});\n\nuserSignal.getTruthy(app, function(app, user) {\n  console.info(&quot;Nice to see you&quot;);\n});\n\nuserSignal.set({\n  name: &quot;Joe&quot;\n});\n\nuserSignal.unset();</code></pre>\n<p>The console ouput is:</p>\n<pre><code class=\"language-shell\">    Let&#39;s see some friends\n    Hello Jane\n    Nice to see you\n    Hello Joe\n    Nice to see you</code></pre>\n<p>We are calling getTruthy on the userSignal two times, one for &quot;Hello &quot; + user.name and one for &quot;Nice to see you&quot;. The callback is invoked when the value is <a href=\"http://www.sitepoint.com/javascript-truthy-falsy/\" target=\"_blank\">Truthy</a>. So when userSignal.unset is called, the callbacks are not invoked.</p>\n<p>What is nice about having a dedicated signal object is that you can bind to it even when it&#39;s value is undefined, thereby avoiding order dependencies and simplifying your logic.</p>\n<p>backbone-signal also utilizes Backbone&#39;s listenTo and listenToOnce methods, which make it easy to clean up by calling stopListening on the listener.</p>\n<p>backbone-signal is being used in <a href=\"http://www.rundavoo.com\" target=\"_blank\">www.rundavoo.com</a> and has been fun to use, especially with <a href=\"http://nodejs.org/\" target=\"_blank\">node.js</a> &amp; <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a>. It&#39;s been a pleasure using a lightweight unframework to freely structure the dataflow logic of the site.</p>\n<p>The api includes:</p>\n<h2 id=\"loadingunloading\">Loading/Unloading</h2>\n<ul>\n<li>load - Invokes the loader when the value is not defined</li>\n<li>forceLoad - Invokes the loader (regardless if the value is defined)</li>\n<li>reload - Unsets the value then invokes the loader</li>\n<li>unload - Invokes the unloader</li>\n<li>setLoader - Sets the Loader callback</li>\n<li>unsetLoader - Unsets the Loader callback</li>\n<li>setUnloader - Sets the Unloader callback</li>\n<li>unsetUnloader - Unsets the Unloader callback</li>\n</ul>\n<h2 id=\"setters\">Setters</h2>\n<ul>\n<li>set - Sets the value with the argument</li>\n<li>unset - Unets the value</li>\n<li>value - Returns the value</li>\n</ul>\n<h2 id=\"getterslisteners\">Getters/Listeners</h2>\n<ul>\n<li>get - Invoke the callback immediately and on any additional changes to the value</li>\n<li>listen - Listen to any additional changes to the value (does not invoke the callback immediately)</li>\n<li>getOnce - Invoke the callback immediately one time</li>\n<li>listenOnce - Listen to any additional changes to the value one time</li>\n<li>getTruthy - Invoke the callback immediately and on any additional changes to the value if the value is truthy</li>\n<li>listenTruthy - Listen to any additional changes to the value if the value is truthy</li>\n<li>getTruthyOnce - Invoke the callback immediately or on any additional changes to the value if the value is truthy one time only</li>\n<li>listenTruthyOnce - Listen to any additional changes to the value if the value is truthy one time only</li>\n<li>getFalsy- Invoke the callback immediately and on any additional changes to the value if the value is falsy</li>\n<li>listenFalsy - Listen to any additional changes to the value if the value is falsy</li>\n<li>getFalsyOnce - Invoke the callback immediately or on any additional changes to the value if the value is falsy one time only</li>\n<li>listenFalsyOnce - Listen to any additional changes to the value if the value is falsy one time only</li>\n<li>getDefined- Invoke the callback immediately and on any additional changes to the value if the value is defined</li>\n<li>listenDefined - Listen to any additional changes to the value if the value is defined</li>\n<li>getDefinedOnce - Invoke the callback immediately or on any additional changes to the value if the value is defined one time only</li>\n<li>listenDefinedOnce - Listen to any additional changes to the value if the value is defined one time only</li>\n<li>unbind - Unbinds the given object from the callback</li>\n<li>loading</li>\n<li>isLoading</li>\n</ul>\n","metadata":{"title":"backbone-signal - Practical Reactive Programming in Javascript","author":"Brian Takita","date":"9/7/13 10:16 AM","intro":"<a href=\"/posts/backbone-signal-practical-reactive-programming-in-javascript/\">\n  <img\n    src=\"/images/neurons.jpg\"\n    alt=\"Brian Takita - backbone-signal - Practical Reactive Programming in Javascript - From Parthiv Haldipur http://www.flickr.com/photos/hmmmmm/3903176411/ - Licensed under Creative Commons\"\n  />\n</a>\n\n<p>I have recently released <a href=\"https://github.com/btakita/backbone-signal\" target=\"_blank\">backbone-signal (github.com)</a>, which is a <a href=\"https://en.wikipedia.org/wiki/Reactive_programming\" target=\"_blank\">reactive programming (Wikipedia)</a> library with a practical &amp; javascripty model api.</p>\n"},"slug":"backbone-signal-practical-reactive-programming-in-javascript","date":"2013-09-07T14:16:00.000Z","txt__date":"9/7/13 10:16 AM","path":"/posts/backbone-signal-practical-reactive-programming-in-javascript","url":"https://briantakita.com/posts/backbone-signal-practical-reactive-programming-in-javascript"}