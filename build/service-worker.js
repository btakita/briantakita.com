(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1558219815000;

	const files = [
		"service-worker-index.html",
		"CNAME",
		"favicon.ico",
		"favicon.png",
		"favicon.svg",
		"images/1200px-Creation_of_Adam.jpg",
		"images/Feed-icon.svg",
		"images/encyclopedia-britannica.jpg",
		"images/feeling-abstraction.jpg",
		"images/neurons.jpg",
		"images/unicorn.jpg",
		"images/web-fractal_BloggS74.com_-1024x640.jpg"
	];

	const shell = [
		"client/chunk.1987d881.js",
		"client/client.fde6b329.js",
		"client/chunk.7f5cd15f.js",
		"client/chunk.326a4a87.js",
		"client/chunk.cd7ed10c.js",
		"client/chunk.76d13346.js",
		"client/20190415.06951d6c.js",
		"client/20190403.de5bbbaf.js",
		"client/index.e7f6c49a.js",
		"client/index.38f4d51f.js",
		"client/index.a23f1b6d.js",
		"client/index.580397cf.js",
		"client/[post_id].597f5f2d.js",
		"client/index.cfb38a00.js",
		"client/archive.7f69375e.js"
	];

	const ASSETS = `cache${timestamp}`;
	// `shell` is an array of all the files generated by webpack,
	// `assets` is an array of everything in the `assets` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);
	self.addEventListener('install', event => {
		event.waitUntil(
			caches
				.open(ASSETS)
				.then(cache => cache.addAll(to_cache))
				.then(() => {
					self.skipWaiting();
				})
		);
	});
	self.addEventListener('activate', event => {
		event.waitUntil(
			caches.keys().then(async keys => {
				// delete old caches
				for (const key of keys) {
					if (key !== ASSETS) await caches.delete(key);
				}
				self.clients.claim();
			})
		);
	});
	self.addEventListener('fetch', event => {
		if (event.request.method !== 'GET') return;
		const url = new URL(event.request.url);
		// don't try to handle e.g. data: URIs
		if (!url.protocol.startsWith('http')) return;
		// ignore dev server requests
		if (url.hostname === self.location.hostname && url.port !== self.location.port) return;
		// always serve assets and webpack-generated files from cache
		if (url.host === self.location.host && cached.has(url.pathname)) {
			event.respondWith(caches.match(event.request));
			return;
		}
		// for pages, you might want to serve a shell `index.html` file,
		// which Sapper has generated for you. It's not right for every
		// app, but if it's right for yours then uncomment this section
		/*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/index.html'));
			return;
		}
		*/
		// for everything else, try the network first, falling back to
		// cache if the user is offline. (If the pages never change, you
		// might prefer a cache-first approach to a network-first one.)
		event.respondWith(
			caches
				.open(`offline${timestamp}`)
				.then(async cache => {
					try {
						if (event.request.cache === 'only-if-cache') {
							// workaround Chrome devtools bug https://github.com/sveltejs/sapper-template/issues/34
							event.request.mode = 'same-origin';
						}
						const response = await fetch(event.request);
						cache.put(event.request, response.clone());
						return response;
					} catch (err) {
						const response = await cache.match(event.request);
						if (response) return response;
						throw err;
					}
				})
		);
	});

}());
